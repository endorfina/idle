cmake_minimum_required(VERSION 3.8.2)

project(idle
    LANGUAGES C CXX)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-rtti -fno-exceptions -ffast-math")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Og")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3 -DNDEBUG -flto")
set(CMAKE_CXX_STANDARD 17) #requires 3.8.2
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_SKIP_RPATH ON)
set(CMAKE_CXX_EXTENSIONS OFF) # enforces -std=c++11 instead of -std=gnu++11
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_BUILD_TYPE "Release" CACHE STRING "${PROJECT_NAME} build configuration" FORCE)
endif()
message(STATUS "Build configured as \"${CMAKE_BUILD_TYPE}\"")

if(ANDROID)
    set(CMAKE_VERBOSE_MAKEFILE ON)
endif()

if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    set(MACOSX TRUE)
endif()

option(MAKESHIFT_UNITY "Tries to build the main library in unity mode, when cmake doesn't provide one" OFF)

add_library(lodepng STATIC "lodepng.cpp")
target_compile_definitions(lodepng PUBLIC LODEPNG_NO_COMPILE_ERROR_TEXT LODEPNG_NO_COMPILE_ZLIB LODEPNG_NO_COMPILE_DISK)

include_directories(${PROJECT_SOURCE_DIR}/include)

set(${PROJECT_NAME}-files
        database.cpp
        drawable.cpp
        pointer.cpp
        fonts.cpp
        gl.cpp
        io.cpp
        main_wrapper.cpp
        room_controller.cpp
        room_landing.cpp
        room_model.cpp
        scoped_thread.cpp
        these_bones.cpp
        top.cpp
        blue/script.cpp # TODO: decide if we want to keep blue
        blue/builtin.cpp
        application.cpp)

function(jumbo library filelist)
    set(UNITY_FILE "${CMAKE_BINARY_DIR}/${library}.jumbo.cpp")
    file(WRITE ${UNITY_FILE} "/* Jumbo build file generated by cmake (MAKESHIFT_UNITY) */\n")

    foreach(FF IN LISTS filelist)
        file(APPEND ${UNITY_FILE} "#include \"${CMAKE_SOURCE_DIR}/${FF}\"\n")
    endforeach()

    target_sources(${library} PRIVATE ${UNITY_FILE})
endfunction()

add_library(${PROJECT_NAME}-obj STATIC)

set(SHADER_OUTPUT "embedded_shaders.hpp")
set(SHADER_SOURCE "shader_source.txt")
set(SHADER_GENERATOR "generate.sh")

add_custom_target(${PROJECT_NAME}-generate-sh
    COMMAND test ! "${SHADER_SOURCE}" -nt "${SHADER_OUTPUT}" -a ! "${SHADER_GENERATOR}" -nt "${SHADER_OUTPUT}" || bash "${SHADER_GENERATOR}" < "${SHADER_SOURCE}" > "${SHADER_OUTPUT}"
    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
    COMMENT "Preparing ${SHADER_OUTPUT}")

add_dependencies(${PROJECT_NAME}-obj ${PROJECT_NAME}-generate-sh)

if(MAKESHIFT_UNITY)
    jumbo(${PROJECT_NAME}-obj "${${PROJECT_NAME}-files}")
else()
    target_sources(${PROJECT_NAME}-obj PRIVATE ${${PROJECT_NAME}-files})
endif()

target_compile_definitions(${PROJECT_NAME}-obj PUBLIC APPLICATION_FPS=40)
set_target_properties(${PROJECT_NAME}-obj PROPERTIES COMPILE_FLAGS "-Wall -Wredundant-move")
set_source_files_properties(jpeg.cpp PROPERTIES COMPILE_FLAGS "-Wno-sign-compare")

if(DEFINED CMAKE_BUILD_TYPE AND CMAKE_BUILD_TYPE STREQUAL "Debug")
    target_compile_definitions(${PROJECT_NAME}-obj PUBLIC DEBUG)
endif()

find_package(ZLIB REQUIRED)
add_library(${PROJECT_NAME}-ft OBJECT "FreeType.cpp")

add_subdirectory(platform)
add_subdirectory(soloud)
add_subdirectory(test)

