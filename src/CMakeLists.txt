cmake_minimum_required(VERSION 3.8.2)

project(idle
    VERSION 0.1
    LANGUAGES C CXX)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-rtti -fno-exceptions -ffast-math")
# set(CMAKE_CXX_STANDARD 17) # 17 requires 3.8.2, 20 requires 3.12.4
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_SKIP_RPATH ON)
set(CMAKE_CXX_EXTENSIONS OFF) # enforces -std=c++11 instead of -std=gnu++11
set(CMAKE_VISIBILITY_INLINES_HIDDEN ON)

message(STATUS "Build configured as \"${CMAKE_BUILD_TYPE}\"")

if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    set(MACOSX TRUE)
endif()

set(${PROJECT_NAME}-files
        spinlock.cpp
        drawable.cpp
        crash_handler.cpp
        statistician.cry
        hotel/variant.hry
        hotel/service.cry
        hotel/room_landing.cry
        hotel/room_model.cpp
        room_controller.cpp
        lodge.cry
        gl.cpp
        fonts.cpp
        pointer_wrapper.cry
        application.cry
        main_wrapper.cpp)

set(SHADER_OUTPUT_BASENAME "embedded_shaders.hpp")
set(SHADER_OUTPUT "${PROJECT_NAME}-include/${SHADER_OUTPUT_BASENAME}")
set(SHADER_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/shader_source.glsl")
set(SHADER_GENERATOR "${CMAKE_CURRENT_SOURCE_DIR}/generate.sh")

set(LOG_LEVEL "2" CACHE STRING "Print or hide logs. 0 - nothing, 1 - error, 2 - warning, 3 - info, 4 - verbose")

option(PRUNE_SYMBOLS "Removes symbols at build time" ON)

option(MAKESHIFT_UNITY "Tries to build the main library in unity mode, when cmake doesn't provide one" ON)

option(COMPILE_GALLERY "Rig testing gallery" OFF)

option(COMPILE_FPS_COUNTERS "Performance measurement" OFF)

option(COMPILE_FONT_DEBUG_SCREEN "Shows a 5s splash of the entire loaded font texture" OFF)

function(jumbo library filelist)
    set(UNITY_FILE "${CMAKE_CURRENT_BINARY_DIR}/${library}.jumbo.cpp")
    file(WRITE ${UNITY_FILE} "/* Jumbo build file generated by cmake (MAKESHIFT_UNITY) */\n")

    foreach(FF IN LISTS filelist)
        if(NOT FF MATCHES "^/")
            set(FF "${CMAKE_CURRENT_SOURCE_DIR}/${FF}")
        endif()

        file(APPEND ${UNITY_FILE} "#include \"${FF}\"\n")
    endforeach()

    target_sources(${library} PRIVATE ${UNITY_FILE})
endfunction()

set(CHERRY_DIR "${CMAKE_CURRENT_SOURCE_DIR}/cherry")
set(CHERRY_INTERNAL_DIR "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-include/chry")

set(CHERRY_FILE_LIST "${${PROJECT_NAME}-files}")
set(CHERRY_BYPRODUCTS "")
list(FILTER ${PROJECT_NAME}-files EXCLUDE REGEX "\\.[ch]ry$")
list(FILTER CHERRY_FILE_LIST INCLUDE REGEX "\\.[ch]ry$")

file(MAKE_DIRECTORY "${CHERRY_INTERNAL_DIR}")

foreach(CHERRY_FILE IN LISTS CHERRY_FILE_LIST)
    string(REGEX REPLACE "\\.([ch])ry$" ".\\1pp" CHERRY_FILE "${CHERRY_INTERNAL_DIR}/${CHERRY_FILE}")
    list(APPEND CHERRY_BYPRODUCTS "${CHERRY_FILE}")

    if(CHERRY_FILE MATCHES "\\.cpp$")
        string(REGEX REPLACE "\\.cpp$" ".hpp" CHERRY_FILE "${CHERRY_FILE}")
        list(APPEND CHERRY_BYPRODUCTS "${CHERRY_FILE}")
    endif()
endforeach()

foreach(FF IN LISTS CHERRY_BYPRODUCTS)
    if(NOT EXISTS "${FF}")
        string(REGEX REPLACE "/[^/]+$" "" CHERRY_FILE_PARENT_DIR "${FF}")
        file(MAKE_DIRECTORY "${CHERRY_FILE_PARENT_DIR}")
        file(TOUCH "${CHERRY_FILE}")
    endif()
endforeach()

list(APPEND ${PROJECT_NAME}-files ${CHERRY_BYPRODUCTS})

add_custom_target(${PROJECT_NAME}-cherry
    COMMAND ./cherry.sh -q -R scr -h -s "${CMAKE_CURRENT_SOURCE_DIR}" -o "${CHERRY_INTERNAL_DIR}" ${CHERRY_FILE_LIST}
    BYPRODUCTS ${CHERRY_BYPRODUCTS}
    WORKING_DIRECTORY "${CHERRY_DIR}"
    COMMENT "üå∏ .[ch]ry translate"
    VERBATIM)

add_library(lodepng STATIC "lodepng/lodepng.cpp")
target_compile_definitions(lodepng PUBLIC LODEPNG_NO_COMPILE_ZLIB LODEPNG_NO_COMPILE_DISK)
target_include_directories(lodepng INTERFACE lodepng)

add_library(${PROJECT_NAME}-top INTERFACE)
add_library(${PROJECT_NAME}-ft STATIC "freetype_glue.cpp")
add_library(${PROJECT_NAME}-obj STATIC "${CMAKE_CURRENT_BINARY_DIR}/${SHADER_OUTPUT}")

# When we build idle this will automatically re-generate the header,
# provided either the shader source or the script had been modified.
add_custom_target(${PROJECT_NAME}-generate-sh
    COMMAND test
        -r "${SHADER_OUTPUT}"
        -a "${SHADER_OUTPUT}" -nt "${SHADER_SOURCE}"
        -a "${SHADER_OUTPUT}" -nt "${SHADER_GENERATOR}"
        && echo "üèÆ ${SHADER_OUTPUT_BASENAME} is up-to-date."
        || "${SHADER_GENERATOR}" < "${SHADER_SOURCE}" > "${SHADER_OUTPUT}"
    BYPRODUCTS "${SHADER_OUTPUT}"
    COMMENT "Preparing ${SHADER_OUTPUT}"
    VERBATIM)

add_dependencies(${PROJECT_NAME}-obj ${PROJECT_NAME}-generate-sh ${PROJECT_NAME}-cherry)

target_include_directories(${PROJECT_NAME}-obj PRIVATE "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-include")

if(COMPILE_GALLERY)
    target_compile_definitions(${PROJECT_NAME}-obj PRIVATE IDLE_COMPILE_GALLERY)
endif()

if(COMPILE_FPS_COUNTERS)
    target_compile_definitions(${PROJECT_NAME}-obj PRIVATE IDLE_COMPILE_FPS_COUNTERS)
endif()

if(COMPILE_FONT_DEBUG_SCREEN)
    target_compile_definitions(${PROJECT_NAME}-obj PRIVATE IDLE_COMPILE_FONT_DEBUG_SCREEN)
endif()

if(MAKESHIFT_UNITY)
    jumbo(${PROJECT_NAME}-obj "${${PROJECT_NAME}-files}")
else()
    target_sources(${PROJECT_NAME}-obj PRIVATE ${${PROJECT_NAME}-files})
endif()

if(NOT MACOSX)
    add_subdirectory(platform)
endif()
# add_subdirectory(soloud) # TODO: turn this back on when we need sound again

target_include_directories(${PROJECT_NAME}-top INTERFACE include)
target_compile_definitions(${PROJECT_NAME}-top INTERFACE "$<$<CONFIG:Debug>:DEBUG>" "LOG_LEVEL=${LOG_LEVEL}")
target_compile_options(${PROJECT_NAME}-top INTERFACE -Wall -Wredundant-move -fno-char8_t)
target_compile_features(${PROJECT_NAME}-top INTERFACE cxx_std_20)

if("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU")
    target_compile_options(${PROJECT_NAME}-top INTERFACE -fconstexpr-ops-limit=268435456)
elseif("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
    target_compile_options(${PROJECT_NAME}-top INTERFACE -fconstexpr-steps=268435456)
endif()

target_compile_definitions(lodepng PUBLIC "$<$<NOT:$<CONFIG:Debug>>:LODEPNG_NO_COMPILE_ERROR_TEXT>")

target_link_libraries(${PROJECT_NAME}-ft PUBLIC ${PROJECT_NAME}-top)

find_package(ZLIB REQUIRED)
target_link_libraries(${PROJECT_NAME}-obj
            PUBLIC ${PROJECT_NAME}-top
            PRIVATE ${PROJECT_NAME}-ft
            PRIVATE lodepng
            PRIVATE ZLIB::ZLIB)

if(ANDROID)
    target_link_libraries(${PROJECT_NAME}-ft PRIVATE freetype)
else()
    find_package(Freetype REQUIRED)
    target_link_libraries(${PROJECT_NAME}-ft PRIVATE Freetype::Freetype)
    target_link_libraries(${PROJECT_NAME}-obj PRIVATE atomic)

    add_subdirectory(test)
endif()

